function [input,data,raw] =  xread(old_input)
%   [input,data,raw]  = XREAD(old_input) reads xGRAPH data files.
%   Input:  'filename' from input
%   If input is cell array, reads data in file 'input{1}.file'.
%   If input is string: 'fname', reads input and data from file 'fname'.
%   Output: 'input', new parameter cell array, data cell array 'cdata'.
%   Optional: 'raw' trajectories from a file.
%   Licensed by Peter D. Drummond & Simon Kiesewetter (2015) - see License

raw={};                                        %%initialize raw data
saved = 0;                                     %%saved  = 0 for new input
if ischar(old_input)                           %%if input is character
	fname=old_input;                           %%store label
	saved = 1;                                 %%saved  = 1 for saved input
else                                           %%end check if data is label
	input = xmakecell(old_input);
	fname = input{1}.file;                     %%store label
end                                            %%end if data is character
hflag = xreadname(fname);                      %%check filename is OK
if hflag == 0                                  %%if filename  Matlab type
    load(fname);                               %%load file data
    try                                        %%test Matlab filename
	v = input{1}.version;                      %%get input version name
	fprintf('Reading Matlab file %s generated by %s\n',fname,v);
    catch                                      %%error in file filename
	fprintf('Warning in xread: file %s is not an xGRAPH file\n', fname);
    end
    if saved == 0                              %% if new input required
	input = old_input;                         %%use graphics input
    end                                        %%end if  saved flag = 0
    return;                                    %%return to xgraph
end                                            %%end test Matlab filename
try                                            %%test HDF5 filename
    v = h5readatt(fname,'/','xGRAPH_version');  %%get version name
    fprintf('Reading HDF5 file %s generated by %s\n', fname,v);
catch                                          %%error in file filename
    fprintf('Warning in xread: file %s is not an xGRAPH file\n', fname);
end                                            %%end test HDF5 filename
sequence = h5readatt(fname,'/','Sequence');    %%define sequence number
data = cell(1,sequence);                       %%set data to cell
for s = 1:sequence                             %%loop over sequence
    %in = struct;                              %%define structure
    seq = sprintf('/data/sequence_%d',s);      %%name for sequence
    graphs = h5readatt(fname, seq, 'Graphs');  %%define graph number
    for g = 1:graphs                           %%loop over graphs
	graphname = sprintf('/graph_%d',g);
	dsname = [seq graphname];
	data{s}{g}= h5read(fname,dsname);
    end                                        %%end loop graphs
    in=xh5attributes(fname, [seq '/input']);
    input{s} = in;
end                                            %%end loop sequence
    if saved == 0                              %% if saved flag = 0
	input = old_input;                         %%use graphics input
    end                                        %%end if  saved flag = 0
end

function [res] = xh5attributes(filename, path)
    info = h5info(filename, path);
    num_groups = max(size(info.Groups));            %%number of subgroups
    num_attributes = max(size(info.Attributes));    %%number of attributes
    is_cell = 0;                                    %%cell array flag
    for i=1:num_attributes
       if strcmp(info.Attributes(i).Name, ...       %%if cell flag is set
	       'XSPDE_iscell')
	   is_cell = 1;                             %%mark as cell array
       end
    end
    for i=1:num_groups
       if all(isstrprop(info.Groups(i).Name, ...    %%if have purely numeric
	       'digit'))                            %%named subgroup
	  is_cell = 1;                              %%mark as cell array
       end
    end
    if (~is_cell)                                   %%if not a cell array
	imag_list = [];                             %%list of imaginary values
	for i = 1:num_attributes                    %%loop over attributes
	    attname = info.Attributes(i).Name;
	    attvalue = info.Attributes(i).Value;
	    save_attvalue = 1;                      %%indicate whether attvalue will be saved
	    if ischar(attvalue)
		len = length (attvalue);            %%if is function handle
		if (len > 9) && ...                 %%read function as string
			strcmp('function_', attvalue(1:9))
		    attvalue = str2func(attvalue(10:len));
		end
	    end
	    if isa(attvalue,'double') && strlength(attname) > 8 && ...
	       strcmp(attname(end-7:end),'__rowvec')%%if name of attribute
						    %%ends with __rowvec
		attname = attname(1:end-8);         %%cut off __rowvec suffix
		if ismatrix(attvalue) && size(attvalue,1) > 1 && ...
		       size(attvalue,2) == 1        %%if matrix is 1D, then transpose
		    attvalue = attvalue';
		end
	    end
	    if isa(attvalue,'double') && strlength(attname) > 6 && ...
	       strcmp(attname(end-5:end),'__imag')  %%if field name ends with __imag
						    %%then add to list of imaginary values
		imag_list = [imag_list;{attname(1:end-6),attvalue}];
		save_attvalue = 0;                  %%unmark for saving
	    end
	    if save_attvalue
		res.(attname) = attvalue;
	    end
	end
	for i_imag = 1:size(imag_list,1)             %%loop over list of imaginary values
	    attname = imag_list{i_imag,1};
	    attval  = imag_list{i_imag,2};
	    if isfield(res,attname)                  %%if a field with the same name exists
		res.(attname) = res.(attname) + 1j*attval;
	    end                                      %%add imaginary values to existing fields
	end
	for i = 1:num_groups                         %%loop over subgroups
	    group_name = info.Groups(i).Name;
	    tmp = xh5attributes(filename, group_name);%recursively read subgroup
	    res.(xcut_off_path(group_name)) = tmp;
	end
    else                                            %%if is a cell array
	res = cell(1,num_groups);
	for i=1:num_groups                          %%loop over subgroups
	    subpath = strcat(path, '/', int2str(i));
	    tmp = xh5attributes(filename, subpath); %%recursively read subgroup
	    res{i} = tmp.value;
	end
    end
end

function [res] = xcut_off_path(str)
%   XCUT_OFF_PATH(str) removes path data from an HDF5 group name
%   Output: HDF5 group name without path data.
%   Licensed by Peter D. Drummond & Simon Kiesewetter (2015) - see License
    C = strsplit(str,'/');
    res = C{size(C,2)};
end

function [hflag] = xreadname(filename)
%   [hflag] = XREADNAME(in_fname)
%   Tests for a valid input filename for reading.
%   Returns hflag = 1 if file is an HDF5 file, '.h5';
%   Returns hflag = 0 if file is a matlab file, '.mat';
%   Returns error1 if file does not exist or invalid.
%   Licensed by Peter D. Drummond & Simon Kiesewetter (2015) - see License

hflag = -1;
[~,~,ext] = fileparts(filename);
if strcmp(ext, '.h5')
    hflag = 1;
end
if strcmp(ext, '.mat')
    hflag = 0;
end
if hflag == -1
    error('Filename %s must end with .mat or .h5 \n', filename);
else
  if ~exist(filename, 'file')
    error('File %s doesn''t exist\n', filename);
  end
end
end
