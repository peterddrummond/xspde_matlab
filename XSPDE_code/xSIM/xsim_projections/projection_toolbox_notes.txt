Projected SDE Toolbox - notes about codes


(1) SDE projection algorithms available in xspde

The toolbox has three predefined algorithms, xEtn, xMPt, xMPtn. Here the capital E stands for Euler, MP for midpoint. The suffixes indicate the type of projection, where t=tangential, n=normal. In all cases, if it is present, a normal projection is used last.

(2) Defining the manifold geometry in xspde

The tangential and normal projections define the geometry of any submanifold. These are input by setting the variable r.project equal to a function handle. There are three different predefined manifold geometry types, which need different inputs, given below.

(3) Calling the r.project function in xspde

The calling arguments for r.project are: (d,a,n,r), where  d is a vector for tangential projection at location a, a is the current (near)-manifold location, n  is an option switch, and r is the parameter structure, where the options available in any r.project implementation are:

n = 0 returns the tangent vector for testing

n = 1 returns the tangential projection of d  at a

n = 2 returns the normal projection of a, where d is not used

n = 4 returns the constraint function at a for testing

(4) Types of projection available in xspde

The projections defined in an xspde r.project function can be of any type. Arbitrary dimension reduction and manifold geometry is possible. Currently in the examples, dimensionality is reduced by 1, and normal projections use fixed point iterations, defined by  r.iterproj.

(5) The predefined manifold geometries in xspde

The current manifolds, by setting r.project = @xquadproj ..., are as follows:

1) Quadratic  - xquadproj - needs: r.qc
   defined by f = \sum qc_ij x^i x^j - 1 = 0

2) Polynomial - xpolproj - needs: r.vc
   defined by f =  \sum vc_i (x^i)^power - 1 = 0

3) Catenoid   - xcatproj - uses fixed coefficients
   defined by f = (x_1)^2 + (x_2)^2 - (sinh(x_3))^2 - 1 = 0
   
(6) Running checks using the xcheck function
   
This function is a convergence checker, which runs xsim 'checks' times, increasing the initial r.steps by 2 after each run, reducing the step-size by 2. It needs r.averages to be set initially as the number of averages to be checked. In each case it returns the maximum difference with an input 'compare'. It also returns the statistical error-bar found at the maximum error. The data returned is 'name' for the run-name, 'dif' for differences, 'sig' for the rms error bar, including both standard deviations if present. The xsim 'r.checks' option is set to zero to allow this, otherwise two different checks would be carried out. 

